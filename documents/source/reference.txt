.. index:: 
	single: Language Specification; Introduction

======================
Language Specification
======================

In this chapter we will learn about

* Language keywords
* Language Functions
* Compiler Errors
* Runtime Errors
* Environment Errors
* Language Grammar
* Virtual Machine (VM) Instructions

.. index:: 
	pair: Language Specification; Language Keywords

Language Keywords
=================

Keywords Count : 58

* again
* and
* but
* bye
* call
* case
* catch
* changeringkeyword
* changeringoperator
* class
* def
* do
* done
* else
* elseif
* end
* exit
* for
* from
* func
* get
* give
* if
* import
* in
* load
* loadsyntax
* loop
* new
* next
* not
* off
* ok
* on
* or
* other
* package
* private
* put
* return
* see
* step
* switch
* to
* try
* while
* endfunc
* endclass
* endpackage
* endif
* endfor
* endwhile
* endswitch
* endtry
* function
* endfunction
* break
* continue

.. index:: 
	pair: Language Specification; Language Functions

Language Functions
==================

Functions Count : 245

.. code-block:: ring

        acos(x) ---> The principal value of the arc cosine of x, expressed in radians
        add(List,Item)
        addattribute(Object,cAttributeName|aAttributesList)
        adddays(cDate,nDays) ---> Date from cDate and after nDays
        addmethod(Object,cNewMethodName,cMethodName|AnonymousFunction)
        addsublistsbyfastcopy()
        addsublistsbymove()
        ascii(character) ---> ASCII Code
        asin(x) ---> The principal value of the arc sine of x, expressed in radians
        assert()
        atan(x) ---> The principal value of the arc tangent of x, expressed in radians
        atan2(y,x) ---> The principal arc tangent of y/x, in the interval [-pi,+pi] radians
        attributes()
	binarysearch(List,ItemValue) ---> Item Index
	binarysearch(List,ItemValue,nColumn) ---> Search in nColumn, returns the Item Index
        bytes2double(cBytes) ---> nNumber
        bytes2float(cBytes) ---> nNumber
        bytes2int(cBytes) ---> nNumber
        callgarbagecollector()
        callgc()
        ceil(x) ---> The smallest integer value greater than or equal to x
        cfunctions()
        char(ASCII Code) ---> character
        chdir()
        checkoverflow()
        classes()
        classname()
        clearerr(FileHandle)
        clock() ---> The number of clock ticks from program start
        clockspersecond() ---> Number of clocks in one second
        closelib()
	copy(string,nCount) ---> string replicated nCount times
        cos(x) ---> The cosine of an angle of x radians
        cosh(x) ---> The hyperbolic cosine of x radians
        currentdir()
        date() ---> String represent the date "dd/mm/yyyy"
        dec(hexadecimal) ---> decimal
        decimals(n) ---> Determine the decimals digits after the point in float/double numbers
        del(list,index)
        diffdays(cDate1,cDate2) ---> number of days (Date1 - Date2)
	dir(cFolderPath) ---> List contains files & sub folders.
        direxists(cDirPath) ---> returns 1 if the directory exists
        double2bytes(nNumber) ---> cBytes
        eval()
        exefilename()
        exefolder()
        exp(x) ---> The value of e raised to the xth power
        fabs(x) ---> The absolute value of x
	fclose(FileHandle)
        feof(FileHandle) ---> returns 1 if EOF and 0 if not
        ferror(FileHandle) ---> returns 1 if error and 0 if not
        fexists(cFileName) ---> returns 1 if the file exists
        fflush(FileHandle)
        fgetc(FileHandle) ---> returns character or EOF
        fgetpos(FileHandle) ---> position handle
        fgets(FileHandle,nSize) ---> string
        filename()
	find(List,ItemValue) ---> Item Index
	find(List,ItemValue,nColumn) ---> Search in nColumn, returns the Item Index
	find(List,ItemValue,nColumn,cAttribute) ---> Item Index
        float2bytes(nNumber) ---> cBytes
        floor(x) ---> The largest integer value less than or equal to x
	fopen(cFileName,cMode) ---> FileHandle
        fputc(FileHandle,cChar)
        fputs(FileHandle,cString)
        fread(FileHandle,nSize)
        freopen(cFileName,cMode,file handle) ---> FileHandle
        fseek(FileHandle,nOffset,nWhence) ---> zero if successful
        fsetpos(FileHandle,PositionHandle)
        ftell(FileHandle) ---> file position as number
        functions()
        fwrite(FileHandle,cString)
        getarch()
        getattribute()
        getchar() ---> Character
        getfilesize(cFilePath) ---> nSize
	getnumber() ---> Number
        getpathtype(cPath) ---> nStatus
        getpointer()
        getptr()
	getstring() ---> String
        globals()
        hex(decimal) ---> hexadecimal
        hex2str(Hexadecimal string) ---> string
        input(nCount) ---> string
	insert(List,Index,Item)
        int2bytes(nNumber) --> cBytes
        intvalue()
        isalnum(value) ---> 1 if the value is digit/letter or 0 if not
        isalpha(value) ---> 1 if the value is a letter or 0 if not
        isandroid()
        isattribute()
        iscfunction()
        isclass()
        iscntrl(value) ---> 1 if the value is a control character or 0 if not
        isdigit(value) ---> 1 if the value is a digit or 0 if not
        isfreebsd()
        isfunction()
        isglobal()
        isgraph(value) ---> 1 if the value can be printed (Except space) or 0 if not
        islinux()
        islist(value) ---> 1 if the value is a list or 0 if not
        islocal()
        islower(value) ---> 1 if the value is lowercase letter or 0 if not
        ismacosx()
        ismethod()
        ismsdos()
        isnull(value) ---> 1 if the value is NULL or 0 if not
        isnumber(value) ---> 1 if the value is a number or 0 if not
        isobject()
        ispackage()
        ispackageclass()
        ispointer()
        isprint(value) ---> 1 if the value occupies a printing position or 0 if not
        isprivateattribute()
        isprivatemethod()
        ispunct(value) ---> 1 if the value is a punctuation character or 0 if not
        isspace(value) ---> 1 if the value is a white-space or 0 if not
        isstring(value) ---> 1 if the value is a string or 0 if not
        isunix()
        isupper(value) ---> 1 if the value is an uppercase alphabetic letter or 0 if not
        iswindows()
        iswindows64()
        isxdigit(value) ---> 1 if the value is a hexadecimal digit character or 0 if not
	left(string,count) ---> Get characters starting from the left
	len(string) ---> String length
        len(List) ---> The list size
	lines(string) ---> Number of lines inside the string
        list()
	list2str(list) ---> string contains the list items
        loadlib()
        locals()
        log(x) ---> The natural logarithm of x (the base of e)
	log(x,b) ---> The logarithm of x to the base of b
        log10(x) ---> The common logarithm (base-10 logarithm) of x
	lower(string) ---> convert string letters to lower c
        max()
        memcpy()
        memorycopy()
        mergemethods()
        methods()
        min()
        murmur3hash()
        newlist()
        nofprocessors()
        nullpointer()
        nullptr()
        number(string) ---> Number
        obj2ptr()
        object2pointer()
        objectid()
        packageclasses()
        packagename()
        packages()
        perror(cErrorMessage)
        pointer2object()
        pointer2string()
        pointercompare()
        pow(x,y) ---> x raised to the power of y
        prevfilename()
	print(cString)
	print2str()
        ptr2obj()
        ptr2str()
        ptrcmp()
	puts(cString)
        raise()
        random(x) ---> A random number in the range [0,x]
        randomize()
	read(cFileName) ---> String contains the file content
	Remove(cFileName)
	rename(cOldFileName,cNewFileName) ---> Zero for Success or -1 for Error
	reverse(List) ---> Reversed List
        rewind(FileHandle)
	right(string,count) ---> get characters starting from the right
        ring_give()
        ring_see()
        ring_state_delete()
        ring_state_filetokens()
        ring_state_findvar()
        ring_state_init()
        ring_state_main()
        ring_state_mainfile()
        ring_state_new()
        ring_state_newvar()
        ring_state_runcode()
        ring_state_runfile()
        ring_state_runobjectfile()
        ring_state_scannererror()
        ring_state_setvar()
        ring_state_stringtokens()
        ringvm_callfunc()
        ringvm_calllist()
        ringvm_cfunctionslist()
        ringvm_classeslist()
	ringvm_codelist()
        ringvm_evalinscope()
        ringvm_fileslist()
        ringvm_functionslist()
        ringvm_genarray()
        ringvm_give()
        ringvm_hideerrormsg()
        ringvm_info()
        ringvm_memorylist()
        ringvm_packageslist()
        ringvm_passerror()
        ringvm_scopescount()
        ringvm_see()
        ringvm_settrace()
        ringvm_tracedata()
        ringvm_traceevent()
        ringvm_tracefunc()
        setattribute()
        setpointer()
        setptr()
        shutdown()
        sin(x) ---> The sine of an angle of x radians
        sinh(x) ---> The hyperbolic sine of x radians
	sort(List) ---> Sorted List
	sort(List,nColumn) ---> Sorted List based on nColumn
	sort(List,nColumn,cAttribute) ---> Sorted List based on Object Attribute
        space()
        sqrt(x) ---> The square root of x
        srandom(x) ---> Initialize random number generator
        str2hex(string) ---> hexadecimal string
        str2hexcstyle()
	str2list(string) ---> list contains the string lines
	strcmp(cString1,cString2) ---> value = 0 if cString1 = cString2
        string(number) ---> String
	substr(string,substring) ---> the starting position of substring in string
	substr(string,position)  ---> Get substring starting from position to end
	substr(string,position,count)  ---> Get characters starting from position
	substr(string,substring,newsubstring)  ---> Transformed string (Match case)
	substr(string,substring,newsubstring,1) ---> Transformed string (Ignore case)
        swap()
        sysget()
        sysset()
        system()
        sysunset()
        tan(x) ---> Tangent of an angle of x radians 
        tanh(x) ---> The hyperbolic tangent of x radians
        tempfile() ---> FileHandle
        tempname() ---> generated file name as string
        time() ---> The system time as String
        timelist() ---> List contains the time and date information.
	trim(string) ---> Remove spaces from right and left
        type(value) ---> The Type as String
        ungetc(FileHandle,character)
        unsigned(nNum1,nNum2,cOperator) ---> Perform operation using unsigned numbers
	upper(string) ---> convert string letters to UPPER case
        uptime()
        variablepointer()
        varptr()
        version()
        windowsnl()
	write(cFileName,cString)
	
.. index:: 
	pair: Language Specification; Compiler Errors

Compiler Errors
===============

* Error (C1)  : Error in parameters list, expected identifier
* Error (C2)  : Error in class name
* Error (C3)  : Unclosed control structure, 'ok' is missing
* Error (C4)  : Unclosed control structure, 'end' is missing
* Error (C5)  : Unclosed control structure, next is missing
* Error (C6)  : Error in function name
* Error (C7)  : Error in list items
* Error (C8)  : Parentheses ')' is missing 
* Error (C9)  : Brackets ']' is missing 
* Error (C10) : Error in parent class name
* Error (C11) : Error in expression operator
* Error (C12) : No class definition
* Error (C13) : Error in variable name
* Error (C14) : Try/Catch miss the Catch keyword!
* Error (C15) : Try/Catch miss the Done keyword!
* Error (C16) : Error in Switch statement expression!
* Error (C17) : Switch statement without OFF
* Error (C18) : Missing closing brace for the block opened!
* Error (C19) : Numeric Overflow!
* Error (C20) : Error in package name
* Error (C21) : Unclosed control structure, 'again' is missing
* Error (C22) : Function redefinition, function is already defined!
* Error (C23) : Using '(' after number!
* Error (C24) : The parent class name is identical to the subclass name
* Error (C25) : Trying to access the self reference after the object name
* Error (C26) : Class redefinition, class is already defined!

* Error (S1) : Literal not closed!

* Warning (W1) : Duplication in file name
* Warning (W2) : The Compiler command ChangeRingKeyword requires two words as parameters
* Warning (W3) : Compiler command ChangeRingKeyword - Keyword not found !
* Warning (W4) : The Compiler command  ChangeRingOperator requires two words as parameters
* Warning (W5) : Compiler command ChangeRingOperator - Operator not found !
* Warning (W6) : Using the EXIT command outside loop!"
* Warning (W7) : Using the LOOP command outside loop!"

.. index:: 
	pair: Language Specification; Runtime Errors

Runtime Errors
==============

* Error (R1)  : Can't divide by zero !
* Error (R2)  : Array Access (Index out of range) !
* Error (R3)  : Calling Function without definition !
* Error (R4)  : Stack Overflow !
* Error (R5)  : Can't access the list item, Object is not list !
* Error (R6)  : Variable is required
* Error (R7)  : Can't assign to a string letter more than one character
* Error (R8)  : Variable is not a string 
* Error (R9)  : Using exit command outside loops 
* Error (R10) : Using exit command with number outside the range 
* Error (R11) : Error in class name, class not found! 
* Error (R12) : Error in property name, property not found! 
* Error (R13) : Object is required
* Error (R14) : Calling Method without definition !
* Error (R15) : Error in parent class name, class not found! 
* Error (R16) : Using braces to access unknown object ! 
* Error (R17) : Error, using 'Super' without parent class! 
* Error (R18) : Numeric Overflow! 
* Error (R19) : Calling function with less number of parameters!
* Error (R20) : Calling function with extra number of parameters!
* Error (R21) : Using operator with values of incorrect type
* Error (R22) : Using loop command outside loops 
* Error (R23) : Using loop command with number outside the range 
* Error (R24) : Using uninitialized variable 
* Error (R25) : Error in package name, Package not found! 
* Error (R26) : Calling private method from outside the class 
* Error (R27) : Using private attribute from outside the class 
* Error (R28) : Using bad data type as step value
* Error (R29) : Using bad data type in for loop
* Error (R30) : Parent class name is identical to child class name 
* Error (R31) : Trying to destroy the object using the self reference 
* Error (R32) : The CALL command expect a variable contains string!
* Error (R33) : Bad decimals number (correct range >= 0 and <= 90)
* Error (R34) : Variable is required for the assignment operation
* Error (R35) : Can't create/open the file!
* Error (R36) : The column number is not correct! It's greater than the number of columns in the list
* Error (R37) : Sorry, The command is not supported in this context
* Error (R38) : Runtime Error in loading the dynamic library!
* Error (R39) : Error occurred creating unique filename
* Error (R40) : Numeric underflow!
* Error (R41) : Invalid numeric string

.. index:: 
	pair: Language Specification; Environment Errors

Environment Errors
==================

* Error (E1) : Caught SegFault
* Error (E2) : Out of Memory
* Error (E3) : Deleting scope while no scope!
* Error (E4) : Long VM Instruction!
* Error (E5) : The file type is not correct - the VM expect a ring object file
* Error (E6) : The Ring Object File version is not correct!
* Error (E7) : Internal error in using sscanf() function!
* Error (E8) : Internal error in using fscanf() function!

.. index:: 
	pair: Language Specification; Language Grammar

Language Grammar
================

Program ---> {statement}

Statement ---> 'package' <Identifier> { '.' <Identifier> } ['{' {statement} '}'] ['end'|'endpackage']

Statement ---> 'class' <Identifier> [ 'from'|':'|'<' <Identifier> ] ['{' {statement} '}']['end'|'endclass']

Statement ---> 'func'|'def' <Identifier> [ParaList] ['{' {statement} '}']['end'|'endfunc']

Statement ---> 'import' <Identifier> { '.' <Identifier> }

Statement ---> 'private'

Statement ---> 'load' ['package'|'again'] <Literal>

Statement ---> 'loadsyntax' <Literal>

Statement ---> 'changeringkeyword' <OldKeyword> <NewKeyword>

Statement ---> 'changeringoperator' <OldOperator> <NewOperator>

Statement ---> 'see'|'put' <Expr>

Statement ---> 'give'|'get' <Identifier>

Statement ---> 'if' <Expr> ['{'] {statement} [ {'but'|'elseif' <Expr> {Statement} } ] ['else' {Statement} ] 'ok'|'end'|'}'

Statement ---> 'Switch' <Expr> ['{'] { 'on'|'case' <Expr> {statement} } ['other' {Statement} ]  'off'|'end'|'}'

Statement ---> 'for' <Identifier> '=' <Expr> 'to' <Expr> [ 'step' <Expr> ] ['{'] {Statement} 'next'|'end'|'}'

Statement ---> 'for' <Identifier> 'in' <Expr>  [ 'step' <Expr> ] ['{'] {statement} 'next'|'end'|'}'

Statement ---> 'while' <Expr> ['{'] {statement} 'end'|'}'

Statement ---> 'do' {statement} 'again' <Expr> 

Statement ---> 'try' {statement} ['{'] 'catch' {statement} 'done'|'end'|'}'

Statement ---> 'return' <Expr>

Statement ---> 'bye'

Statement ---> 'exit'

Statement ---> 'loop'

Statement ---> <Expr>

Statement ---> epsilon

ParaList ---> epsilon

ParaList ---> ['('] <Identifier> [{ ',' <Identifier> }] [')']

Expr ---> <LogicNot> [{ 'and'|'or' <LogicNot> }]

LogicNot --> ['not'] <EqualOrNot> 

EqualOrNot --> [ '='|'!=' ] <Compare>

Compare ---> <BitOrXor> [ { '<' | '>' | '<=' | '>=' <BitOrXor> } ]

BitOrXor ---> <BitAnd> [ { '|' | '^' <BitAnd> } ]

BitAnd ---> <BitShift> [ { '&' <BitShift> } ]

BitShift ---> <Arithmetic> [ { '<<' | '>>' <Arithmetic> } ]

Arithmetic ---> <Term> [ { '+' | '-'  <Term>  } ]

Term ---> <Range> [ { '*' | '/' | '%' <Range> } ]

Range ---> <Factor> [ ':' <Factor> ]

Factor ---> <Identifier> [ {Mixer} ] [ '=' <Expr> ]

Factor ---> <Number>

Factor ---> <Literal>

Factor ---> ':' <Identifier>

Factor ---> '-' <Factor>

Factor ---> '(' <Expr> ')'

Factor ---> <List>

Factor ---> 'new' <Identifier>

Factor ---> <AnonymousFunction>

Factor ---> 'call' <identifier> { '.' <Identifier> } '(' <Parameters> ')'

List ---> '[' [ <Expr> { ',' <Expr> } ] ']'

Mixer ---> { '.' <Identifier> }

Mixer ---> '[' <Expr> ']'

Mixer ---> '(' [ <Expr> [ { ',' <Expr> }] ]  ')'

Mixer ---> '{' {Statement} '}'

AnonymousFunction ---> 'func'|'def'| [<ParaList>] '{' {Statement} '}'

.. index:: 
	pair: Language Specification; Virtual Machine Instructions

Virtual Machine (VM) Instructions
=================================

Definitions :-

* VM : Virtual Machine
* Stack : VM Stack
* IR : Instruction Register
* PC : Program Counter
* VP : Variable Pointer
* Stack[nSize] : Last Item in the Stack (Last In - First Out)
* VV : Variable Value (We have a Pointer to a variable, And we access this variable value)
(Stack and Variables)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_PUSHC 		Add string from the IR to the stack
ICO_PUSHN 		Add number from the IR to the stack
ICO_PUSHV 		Replace VP in the stack[nSize] with the variable value 
ICO_LOADADDRESS 	Read variable name from the IR, push VP to the stack
ICO_ASSIGNMENT		Stack[nSize-1] VV = Stack[nSize] VV , POP Stack[nSize]
ICO_INC 		Increment Number in Stack[nSize] by 1
ICO_LOADAPUSHV		The same as ICO_LOADADDRESS then ICO_PUSHV
ICO_NEWLINE		Store new line number (debug info)
ICO_FREESTACK		Remove all items from the stack , nSize = 0
ICO_FILENAME		Store the source code file name (debug info)
ICO_FREELOADASCOPE	Free the Scope List of the current Expression
=======================	============================================================================

(Jump)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_JUMP		Set PC to new value from the IR 
ICO_JUMPZERO		If Stack[nSize] is a number = 0 then Set PC to new value from the IR 
ICO_JUMPFOR		End of for loop
ICO_JUMPONE		If Stack[nSize] is a number = 1 then Set PC to new value from the IR 
ICO_JUMPZERO2		As ICO_JUMPZERO but add 1 to the stack (required for many 'AND' conditions)
ICO_JUMPONE2		As ICO_JUMPONE but add 1 to the stack (required for many 'OR' conditions)
=======================	============================================================================

(Compare)

=======================	==========================================================================================================
Operation			Description
=======================	==========================================================================================================
ICO_LESSEQUAL		If stack[nSize-1] <= stack[nSize] , POP stack[nSize], set Stack[nSize-1] = 1 else set Stack[nSize-1] = 0
ICO_EQUAL		If stack[nSize-1] = stack[nSize] , POP stack[nSize], set Stack[nSize-1] = 1 else set Stack[nSize-1] = 0
ICO_LESS		If stack[nSize-1] < stack[nSize] , POP stack[nSize], set Stack[nSize-1] = 1 else set Stack[nSize-1] = 0
ICO_GREATER		If stack[nSize-1] > stack[nSize] , POP stack[nSize], set Stack[nSize-1] = 1 else set Stack[nSize-1] = 0
ICO_GREATEREQUAL	If stack[nSize-1] >= stack[nSize] , POP stack[nSize], set Stack[nSize-1] = 1 else set Stack[nSize-1] = 0
ICO_NOTEQUAL		If stack[nSize-1] != stack[nSize] , POP stack[nSize], set Stack[nSize-1] = 1 else set Stack[nSize-1] = 0
=======================	==========================================================================================================

(Math)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_SUM			Stack[nSize-1] = Stack[nSize-1] + Stack[nSize] , POP stack[nSize]
ICO_SUB			Stack[nSize-1] = Stack[nSize-1] - Stack[nSize] , POP stack[nSize]
ICO_MUL			Stack[nSize-1] = Stack[nSize-1] * Stack[nSize] , POP stack[nSize]
ICO_DIV			Stack[nSize-1] = Stack[nSize-1] / Stack[nSize] , POP stack[nSize]
ICO_MOD			Stack[nSize-1] = Stack[nSize-1] % Stack[nSize] , POP stack[nSize]
ICO_NEG			Stack[nSize] = - Stack[nSize-1]
ICO_PLUSPLUS		Stack[nSize] = Stack[nSize] + 1
ICO_MINUSMINUS		Stack[nSize] = Stack[nSize] - 1
=======================	============================================================================

(Logic)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_AND			Stack[nSize-1] = Stack[nSize-1] && Stack[nSize] , POP stack[nSize]
ICO_OR			Stack[nSize-1] = Stack[nSize-1] || Stack[nSize] , POP stack[nSize]
ICO_NOT			Stack[nSize]   = ! Stack[nSize]  
=======================	============================================================================

(Lists)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_LISTSTART		Start New List in Temp. Memory
ICO_LISTITEM		Add List Item
ICO_LISTEND		End List
ICO_LOADINDEXADDRESS	Stack[nSize-1] = Stack[nSize-1] VV [ Stack[nSize] ] , POP stack[nSize]
=======================	============================================================================

(Functions)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_LOADFUNC		Find function
ICO_CALL		Call function
ICO_RETURN		Return from function
ICO_RETNULL		Return NULL from function
ICO_RETFROMEVAL		Return after eval() 
ICO_RETITEMREF		Return the list item reference - not the value
ICO_NEWFUNC		Start new function
ICO_BLOCKFLAG		Flag to determine where to jump later (after ICO_RETURN)
ICO_FUNCEXE		Start executing function
ICO_ENDFUNCEXE		End function execution
ICO_ANONYMOUS		Anonymous function
ICO_FREETEMPLISTS	Delete temp. lists
=======================	============================================================================

(User Interface)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_PRINT		Print value to the standard output
ICO_GIVE		Get input from the keyboard
=======================	============================================================================

(End Program/Loop)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_BYE			End execution of VM
ICO_EXITMARK		Place to exit to from a loop	
ICO_POPEXITMARK		Remove exit mark
ICO_EXIT		Break from one loop or more 
ICO_LOOP		Continue to next loop 
=======================	============================================================================

(For Better Performance)

========================	============================================================================
Operation			Description
========================	============================================================================
ICO_PUSHP			Push pointer to the stack
ICO_INCP			Increment variable value using pointer
ICO_PUSHPV			Push value of variable using variable pointer
ICO_INCJUMP			Increment then jump
ICO_INCPJUMP			Increment using pointer then jump
ICO_JUMPVARLENUM		Jump if variable value is <= numeric value
ICO_JUMPVARPLENUM		Jump if variable value (using pointer) <= numeric value 
ICO_LOADFUNCP			Push function pointer
ICO_PUSHPLOCAL			Push pointer to local variable
ICO_INCLPJUMP			Increment value using pointer to local variable then jump
ICO_JUMPVARLPLENUM		Jump if the variable value (using pointer) <= numeric value
ICO_INCPJUMPSTEP1	 	Increment value using variable pointer then jump (for loop step = 1)
ICO_JUMPVARPLENUMSTEP1		Increment value using variable pointer then jump (for loop step = 1)
========================	============================================================================

(Try-Catch-Done)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_TRY			Start try region
ICO_DONE		End try region
=======================	============================================================================

(Duplicate and Range)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_DUPLICATE		Duplicate stack value
ICO_RANGE		Create list from value to value
=======================	============================================================================

(OOP)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_NEWOBJ		Create new object, get class name from the IR, push object pointer to the stack.
ICO_SETSCOPE		Called after creating new object, set the active scope to be the object scope.
ICO_LOADSUBADDRESS	Get object attribute, push the pointer to the stack.
ICO_LOADMETHOD		Find object method 
ICO_AFTERCALLMETHOD	Used after calling a method - normal case
ICO_AFTERCALLMETHOD2	Used after calling a method - second case
ICO_NEWCLASS		Start new class region
ICO_BRACESTART		Open brace
ICO_BRACEEND		End brace
ICO_IMPORT		Import package
ICO_PRIVATE		start private attributes region
ICO_SETPROPERTY		set attribute value - check for setter.	
ICO_CALLCLASSINIT	call class init() method.
=======================	============================================================================

(Other)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_SETREFERENCE	Copy by reference
ICO_KILLREFERENCE	Remove reference
ICO_ASSIGNMENTPOINTER 	Determine the left side variable
ICO_BEFOREEQUAL		Determine operators like += , -= , ... etc
=======================	============================================================================

(Bitwise Operators)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_BITAND		Stack[nSize-1] = Stack[nSize-1] & Stack[nSize] , POP stack[nSize]
ICO_BITOR		Stack[nSize-1] = Stack[nSize-1] | Stack[nSize] , POP stack[nSize]
ICO_BITXOR		Stack[nSize-1] = Stack[nSize-1] ^ Stack[nSize] , POP stack[nSize]
ICO_BITNOT		Stack[nSize] = ! Stack[nSize] 
ICO_BITSHL		Stack[nSize-1] = Stack[nSize-1] << Stack[nSize] , POP stack[nSize]
ICO_BITSHR		Stack[nSize-1] = Stack[nSize-1] >> Stack[nSize] , POP stack[nSize]
=======================	============================================================================

(For Step)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_STEPNUMBER		Determine step number in for loop
ICO_POPSTEP		POP step number from steps stack
ICO_LOADAFIRST		Load the first address of variable name 
=======================	============================================================================

(Custom Global Scope)

=======================	============================================================================
Operation			Description
=======================	============================================================================
ICO_NEWGLOBALSCOPE	Start new custom global scope - used by 'load package' command
ICO_ENDGLOBALSCOPE	End of custom global scope - used by 'load package' command
ICO_SETGLOBALSCOPE	Set the current global scope 
=======================	============================================================================

