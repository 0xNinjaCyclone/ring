.. index:: 
	single: Using FastPro; Introduction

================
Using FastPro
================

In this chapter we will learn about Using the FastPro extension.

This extension is added to the Ring language starting from Ring 1.19.

Contents:

* Bytes2List() function
* List2Bytes() function
* UpdateList() function
* UpdateColumn() function

.. index:: 
	pair: Using FastPro; Bytes2List() function

Bytes2List() function
=====================

Syntax:

.. code-block:: none

	Bytes2List(cBytes) —> aList // [[x,y,R,G,B,A],…]


.. index:: 
	pair: Using FastPro; List2Bytes()

List2Bytes() function
=====================

Syntax:

.. code-block:: none

	List2Bytes(aList) —> cBytes // “RGBA….”


.. index:: 
	pair: Using FastPro; UpdateList()

UpdateList() function
=====================

Syntax:

.. code-block:: none

	updateList(<aList>,<cCommand>,<cSelection>,<nPara1>,<nPara2>,[nPara3])


cCommand could be :set, :add, :sub, :mul, :div, :merge and :copy

cSelection could be :col, :row, :manycols, :manyrows and :items

The required parameters depend on the cCommand/cSelection 

The parameters could be columns/rows numbers 

Also, some command requires a value like the set command

Example:

.. code-block:: ring

	load "fastpro.ring"

	aList = [ [1,2,3],
		  [4,5,6],
		  7:9 ]      

	# Set the values of the first row to 10
		updateList(aList,:set,:row,1,10)
	# Add 10 to each value in the first row
		updateList(aList,:add,:row,1,10)
	# Sub 5 from each value in the first row
		updateList(aList,:sub,:row,1,5)
	# Multiply each value in the first row by 10
		updateList(aList,:mul,:row,1,10)
	# Divide each value in the first row by 2
		updateList(aList,:div,:row,1,2)
	# Copy the first row values to the second row
		updateList(aList,:copy,:row,1,2)
	# Sum the third row and the second row 
	# And the result will be in the third row
		updateList(aList,:merge,:row,3,2)

	? aList

Output:

The list will be [ [75,75,75], [75,75,75], [82,83,84] ]

.. code-block:: one

	75
	75
	75
	75
	75
	75
	82
	83
	84
	

.. index:: 
	pair: Using FastPro; UpdateColumn()

UpdateColumn() function
=======================

Syntax:

.. code-block:: none

	updateColumn(<aList>, [<cCommand>,<nPara1>,<nPara2>,[nPara3]],…)

Using this function we can execute many commands on the list columns

Instead of using updateList() many times and each time we pass :col as the third parameter, we can use updateColumn()

Example from the ImagePixel application that convert the image to Gray

.. image:: updatecolumncode.png
	:alt: updatecolumncode
