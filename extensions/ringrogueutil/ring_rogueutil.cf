<code>
/* Copyright (c) 2024 Mahmoud Fayed <msfclipper@yahoo.com> */

#include "rogueutil/rogueutil.h"

#ifdef _WIN32
	#include "windows.h"
	#include "stdio.h"
#endif

</code>

<constant>
BLACK
BLUE
GREEN
CYAN
RED
MAGENTA
BROWN
GREY
DARKGREY
LIGHTBLUE
LIGHTGREEN
LIGHTCYAN
LIGHTRED
LIGHTMAGENTA
YELLOW
WHITE
KEY_ESCAPE
KEY_ENTER
KEY_SPACE
KEY_INSERT
KEY_HOME
KEY_PGUP
KEY_DELETE
KEY_END
KEY_PGDOWN
KEY_UP
KEY_DOWN
KEY_LEFT
KEY_RIGHT
KEY_F1
KEY_F2
KEY_F3
KEY_F4
KEY_F5
KEY_F6
KEY_F7
KEY_F8
KEY_F9
KEY_F10
KEY_F11
KEY_F12
KEY_NUMDEL
KEY_NUMPAD0
KEY_NUMPAD1
KEY_NUMPAD2
KEY_NUMPAD3
KEY_NUMPAD4
KEY_NUMPAD5
KEY_NUMPAD6
KEY_NUMPAD7
KEY_NUMPAD8
KEY_NUMPAD9
</constant>

<runcode>
aNumberTypes + "const int"
aNumberTypes + "unsigned int"
</runcode>

void locate(int x, int y)
int getch(void)
int kbhit(void)
void gotoxy(int x, int y)
int getkey(void)
int nb_getch(void)
char *getANSIColor(const int c)
char *getANSIBgColor(const int c)
void setColor(int c)
void setBackgroundColor(int c)
int saveDefaultColor(void)
void resetColor(void)
void cls(void)
void setString(char *str)
void setChar(char ch)
void setCursorVisibility(char visible)
void hidecursor(void)
void showcursor(void)
void msleep(unsigned int ms)
int trows(void)
int tcols(void)
void anykey(char *msg)
void setConsoleTitle(char *title)
char *getUsername(void)
void printXY(int x, int y, char *msg)


<register>
void getmouseinfo(void)
</register>

<code>
RING_FUNC(ring_getmouseinfo)
{

#ifdef _WIN32

	INPUT_RECORD ir[128];
	HANDLE hStdInput  = NULL;
	HANDLE hStdOutput = NULL;

	DWORD nRead;      
	DWORD nEvents;                                          
  
	int lMouseEvent,nMouseX,nMouseY,nMouseB;
	List *pList;

	lMouseEvent = 0;

	pList = RING_API_NEWLIST ;

	hStdInput=GetStdHandle(STD_INPUT_HANDLE);
	hStdOutput=GetStdHandle(STD_OUTPUT_HANDLE);

	SetConsoleMode(hStdInput,ENABLE_MOUSE_INPUT|ENABLE_EXTENDED_FLAGS);

	GetNumberOfConsoleInputEvents(hStdInput,&nEvents);

	if (nEvents > 0) {

		PeekConsoleInput(hStdInput,ir,128,&nRead);   
              
		for(size_t i=0;i<nRead;i++)                                
		{                                                          
			if (ir[i].EventType == MOUSE_EVENT)                                
			{                                                                  
				lMouseEvent = 1;                 
				nMouseX = ir[i].Event.MouseEvent.dwMousePosition.X + 1;
				nMouseY = ir[i].Event.MouseEvent.dwMousePosition.Y + 1;
				nMouseB = (int)ir[i].Event.MouseEvent.dwButtonState & 0x07 ;
			}
		}

	}

	ring_list_adddouble_gc(RING_API_STATE,pList,lMouseEvent);
	ring_list_adddouble_gc(RING_API_STATE,pList,nMouseX);
	ring_list_adddouble_gc(RING_API_STATE,pList,nMouseY);
	ring_list_adddouble_gc(RING_API_STATE,pList,nMouseB);

	RING_API_RETLIST(pList);

#endif

}
</code>